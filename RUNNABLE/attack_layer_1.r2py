"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"
DEBUG=True

class AttackABFile():
  def attackLogger(text):
    if DEBUG == True:
      log(text)
  
  def write_file(file, data, offset):
    def write():  
      file.writeat(data,offset)
      #exitall()
    return write
    
  attackLogger("##### LIST FILES ###############################################################################################################")  
  attackLogger(listfiles())
  
  if "testfile.txt.a" in listfiles():
    attackLogger("Removing testfile.txt.a")
    removefile("testfile.txt.a")
    
  if "testfile.txt.b" in listfiles():
    attackLogger("Removing testfile.txt.b")
    removefile("testfile.txt.b")
  attackLogger("##### TEST OPENING FILE ###############################################################################################################")    
  myfile=ABopenfile("testfile.txt",True)  #Create an AB file
  attackLogger("##### TESTING MULTIPLE READS ###############################################################################################################")    
  attackLogger("reading from file: "+myfile.readat(None,0))
  attackLogger("reading from file: "+myfile.readat(None,1))
  attackLogger("reading from file: "+myfile.readat(None,-1))
  attackLogger("reading from file: "+myfile.readat(5,2))
  # I should get 'SE' when reading an empty file...
  attackLogger("##### TESTING ASSERTIONS ###############################################################################################################")      
  assert('SE' == myfile.readat(None,0))
  assert('E' == myfile.readat(None,1))
  assert('SE' == myfile.readat(None,-1))
  assert('SE' == myfile.readat(0,-1))
  #assert('E' == myfile.readat(5,0), "Failure")
  
  attackLogger("##### TESTING WRITING VALID INPUT ###############################################################################################################")    
  # put some valid data in the file.
  myfile.writeat("Stest12345E",0)
  attackLogger(myfile.readat(None,0))
  
  attackLogger("##### TESTING WRITING INVALID INPUT ###############################################################################################################")    
  # attempt to put invalid data in the file.
  myfile.writeat("test12345",0)
  myfile.writeat("attack",20)
  myfile.writeat("foobar",-1)
  attackLogger("reading from file: "+myfile.readat(None,0))
  myfile.writeat("_yacko",5)
  attackLogger("reading from file: "+myfile.readat(None,0))
  myfile.writeat("_wacko",11)
  attackLogger("reading from file: "+myfile.readat(None,0)) 
  
  # I should still get 'SE' because the file wasn't closed.
  assert('SE' == myfile.readat(None,0))
  
  #Close the file
  myfile.close()
  

  attackLogger("##### TEST REOPEN FILE AND WRITING VALID INPUT ###############################################################################################################")
  myfile=ABopenfile("testfile.txt",False)  #Reopen AB file
  attackLogger("reading from file: "+myfile.readat(None,0))
  myfile.writeat("_yacko",5)
  myfile.close()
  attackLogger("##### TEST REOPEN FILE AND READING FROM FILE ###############################################################################################################")
  myfile=ABopenfile("testfile.txt",False)  #Reopen AB file
  attackLogger("reading from file: "+myfile.readat(None,0))
  myfile.writeat("_wacko",11)
  
  assert('SE' == myfile.readat(None,0))
  attackLogger("reading from file: "+myfile.readat(None,0))
  
  myfile.writeat("Stest12345E",0)
  myfile.writeat("_yackoE",5)              #Replace 12345E with _yackoE
  myfile.close()
  myfile=ABopenfile("testfile.txt",False)  #Reopen AB file
  assert('Stest_yackoE' == myfile.readat(None,0))
  
  myfile.close()
  attackLogger("##### TESTING MULTIPLE CONSECUTIVE WRITES ###############################################################################################################")
  myfile=ABopenfile("testfile.txt",False)  #Reopen AB file
  
  numbers = ["1", "2", "3", "4", "5", "6"]
  counter = 5
  for i in numbers:
    attackLogger("\ni="+i)
    createthread(write_file(myfile, i, counter))
    counter = counter + 1
  
#  createthread(write_file(myfile, "1", 5))
#  createthread(write_file(myfile, "2", 6))
#  createthread(write_file(myfile, "3", 7))
#  createthread(write_file(myfile, "4", 8))
#  createthread(write_file(myfile, "5", 9))
#  createthread(write_file(myfile, "6", 10))
  
#  myfile.writeat("1",5)              #Replace _ with 1
#  myfile.writeat("2",6)              #Replace y with 2
#  myfile.writeat("3",7)              #Replace a with 3
#  myfile.writeat("4",8)              #Replace c with 4
#  myfile.writeat("5",9)              #Replace k with 5
#  myfile.writeat("6",10)             #Replace o with 6

  myfile.close()
  attackLogger("##### TEST REOPEN FILE AND READING FROM FILE ###############################################################################################################")
  myfile=ABopenfile("testfile.txt",False)  #Reopen AB file
  attackLogger("Are we reading from file???: "+myfile.readat(None,0))
  #assert('Stest123456E' == myfile.readat(None,0))
  
  myfile.close()
  attackLogger(listfiles())
  
