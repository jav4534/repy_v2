"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"
DEBUG=False
START_TOKEN="S"
END_TOKEN="E"
WHITESPACE_TOKEN=" "
LOCK = createlock()

class ABFile():
  def __init__(self,filename,create):
    # globals
    LOCK.acquire(True)
    mycontext['debug'] = False
    mycontext['writecount'] = 0
    
    logger("initializing instance of class ABFile")
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    logger(self.Afn)
    self.Bfn = filename+'.b'
    logger(self.Bfn)
    
    self.AfileLength = 0
    self.BfileLength = 0
    
    # make the files and add 'SE' to the readat file...
    self.Afile = openfile(self.Afn,create)
    self.Bfile = openfile(self.Bfn,create)
    
    if create:
      self.Afile.writeat('SE',0)
      self.Bfile.writeat('SE',0)
    self.AfileLength = len(self.Afile.readat(None,0))
    logger("==>A File Content At Open::"+self.Afile.readat(None,0))
    logger("==>AfileLength::"+str(self.AfileLength))

  def writeat(self,data,offset):
    logger("===== writeat method =====")

    mycontext['writecount'] = mycontext['writecount'] + 1
    BfileContent = self.Bfile.readat(None,0)
    BfileLength = len(BfileContent)
    # Write the requested data to the B file using the sandbox's writeat call
    logger("data="+data+" | length = "+str(len(data))+" characters")
    logger("B File Content = "+str(BfileContent))
    logger("File length = "+str(BfileLength))
    logger("Write offset = "+str(offset))
    logger(str(data[0]))
    logger(str(data[len(data)-1]))
    
    if data[0] == WHITESPACE_TOKEN:
      logger("Bailing: Write not permitted due to white space")
    #if data[0] != START_TOKEN and data[len(data)-1] != END_TOKEN:
    #  logger("Bailing: Write not permitted due to improper conditions")
    #else:
    elif offset >= BfileLength: 
      logger("Bailing: Write not permitted due to offset being greater than or equal to the length of the file")
    elif offset < 0: 
      logger("Bailing: Write not permitted due to offset being less than zero")
    else: 
      logger("Write permitted!!!")
      self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    logger("===== readat method =====")
    logger("Bytes to read = "+str(bytes))
    logger("Read offset = "+str(offset))
    
    if bytes == 0 :
      bytes = None
    if offset < 0 :
      offset = 0
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def close(self):
    logger("===== close method =====")
    AfileContent = self.Afile.readat(None,0)
    logger("AfileContent: "+AfileContent)
    if AfileContent[0] != START_TOKEN and AfileContent[len(AfileContent)-1] != END_TOKEN:
      logger(self.Afile.readat(0,0))
      self.Afile.writeat(START_TOKEN+END_TOKEN,0)
      logger(self.Afile.readat(0,0))
    else:
      BfileContent = self.Bfile.readat(None,0)
      if BfileContent[0] == WHITESPACE_TOKEN:
        logger("Bailing: Write not permitted")
      elif len(BfileContent) < len(START_TOKEN+END_TOKEN): 
        logger("Bailing: Write not permitted")
      elif BfileContent[0] != START_TOKEN or BfileContent[len(BfileContent)-1] != END_TOKEN:
        logger("Bailing: Write not permitted, not meeting conditions of START_TOKEN and END_TOKEN")
      else:
        logger("About to write ====================>BfileContent: "+BfileContent)
        logger("Writing BfileContent to fileA")
        logger("==>fileLength prior to write::"+str(self.AfileLength))
        self.Afile.writeat(BfileContent,0)
        self.AfileLength = len(self.Afile.readat(None,0))
        logger("==>fileLength after write::"+str(self.AfileLength))
    logger("close()::Afile::"+self.Afile.readat(None,0))
    logger("close()::Bfile::"+self.Bfile.readat(None,0))
    self.Afile.close()
    self.Bfile.close()
    LOCK.release()

def ABopenfile(filename, create):
  logger("At ABopenfile")
  return ABFile(filename,create)

def logger(text):
  if DEBUG == True:
    log(text)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
